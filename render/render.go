package render

import (
	"goNES/ppu"
)

type Renderer struct {
	FrameBuffer [256 * 256 * 4]byte
	Serial      int
}

func NewRenderer() Renderer {
	return Renderer{}
}

func getColors() [64][3]byte {
	colors := [64][3]byte{
		{0x80, 0x80, 0x80}, {0x00, 0x3D, 0xA6}, {0x00, 0x12, 0xB0}, {0x44, 0x00, 0x96},
		{0xA1, 0x00, 0x5E}, {0xC7, 0x00, 0x28}, {0xBA, 0x06, 0x00}, {0x8C, 0x17, 0x00},
		{0x5C, 0x2F, 0x00}, {0x10, 0x45, 0x00}, {0x05, 0x4A, 0x00}, {0x00, 0x47, 0x2E},
		{0x00, 0x41, 0x66}, {0x00, 0x00, 0x00}, {0x05, 0x05, 0x05}, {0x05, 0x05, 0x05},
		{0xC7, 0xC7, 0xC7}, {0x00, 0x77, 0xFF}, {0x21, 0x55, 0xFF}, {0x82, 0x37, 0xFA},
		{0xEB, 0x2F, 0xB5}, {0xFF, 0x29, 0x50}, {0xFF, 0x22, 0x00}, {0xD6, 0x32, 0x00},
		{0xC4, 0x62, 0x00}, {0x35, 0x80, 0x00}, {0x05, 0x8F, 0x00}, {0x00, 0x8A, 0x55},
		{0x00, 0x99, 0xCC}, {0x21, 0x21, 0x21}, {0x09, 0x09, 0x09}, {0x09, 0x09, 0x09},
		{0xFF, 0xFF, 0xFF}, {0x0F, 0xD7, 0xFF}, {0x69, 0xA2, 0xFF}, {0xD4, 0x80, 0xFF},
		{0xFF, 0x45, 0xF3}, {0xFF, 0x61, 0x8B}, {0xFF, 0x88, 0x33}, {0xFF, 0x9C, 0x12},
		{0xFA, 0xBC, 0x20}, {0x9F, 0xE3, 0x0E}, {0x2B, 0xF0, 0x35}, {0x0C, 0xF0, 0xA4},
		{0x05, 0xFB, 0xFF}, {0x5E, 0x5E, 0x5E}, {0x0D, 0x0D, 0x0D}, {0x0D, 0x0D, 0x0D},
		{0xFF, 0xFF, 0xFF}, {0xA6, 0xFC, 0xFF}, {0xB3, 0xEC, 0xFF}, {0xDA, 0xAB, 0xEB},
		{0xFF, 0xA8, 0xF9}, {0xFF, 0xAB, 0xB3}, {0xFF, 0xD2, 0xB0}, {0xFF, 0xEF, 0xA6},
		{0xFF, 0xF7, 0x9C}, {0xD7, 0xE8, 0x95}, {0xA6, 0xED, 0xAF}, {0xA2, 0xF2, 0xDA},
		{0x99, 0xFF, 0xFC}, {0xDD, 0xDD, 0xDD}, {0x11, 0x11, 0x11}, {0x11, 0x11, 0x11},
	}
	return colors
}

func (this Renderer) Render(data ppu.RenderingData) {

	if data.IsSetBackground() {
		this.renderBackground(data.Background, data.Palette)
	}

	if data.IsSetSprites() {
		//$this->renderSprites($data->sprites, $data->palette);
	}

	//$this->canvas->draw($this->frameBuffer);
}

func (this Renderer) renderBackground(background ppu.Background, palette []byte) {
	tiles := background.Tiles
	for i := 0; i < len(tiles); i++ {
		x := (i % 33) * 8
		y := (i / 33) * 8
		this.renderTile(tiles[i], x, y, palette)
	}
}

func (this Renderer) renderTile(tile ppu.Tile, tileX int, tileY int, palette []byte) {
	offsetX := int(tile.Scroll_x) % 8
	offsetY := int(tile.Scroll_y) % 8
	colors := getColors()
	for i := 0; i < 8; i++ {
		for j := 0; j < 8; j++ {
			paletteIndex := (tile.PaletteId * 4) + int(tile.Sprite[i][j])
			colorId := palette[paletteIndex]
			color := colors[colorId]
			x := tileX + j - offsetX
			y := tileY + i - offsetY
			if x >= 0 && 0xFF >= x && y >= 0 && y < 244 {
				index := (x + (y * 0x100)) * 4
				this.FrameBuffer[index] = color[0]
				this.FrameBuffer[index+1] = color[1]
				this.FrameBuffer[index+2] = color[2]
				this.FrameBuffer[index+2] = 0xFF
			}
		}
	}
}
